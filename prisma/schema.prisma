// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  examSessions  ExamSession[]
  questionStats QuestionStats[]

  @@map("users")
}

model QuestionPool {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  questions    Question[]
  examSessions ExamSession[]

  @@map("question_pools")
}

model Question {
  id             String   @id @default(cuid())
  questionPoolId String
  content        String
  explanation    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  questionPool QuestionPool @relation(fields: [questionPoolId], references: [id], onDelete: Cascade)
  answers      Answer[]
  userAnswers  UserAnswer[]
  questionStats QuestionStats[]

  @@map("questions")
}

model Answer {
  id         String   @id @default(cuid())
  questionId String
  content    String
  isCorrect  Boolean
  createdAt  DateTime @default(now())

  // Relations
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("answers")
}

model ExamSession {
  id             String       @id @default(cuid())
  userId         String
  questionPoolId String
  questionCount  Int
  timeLimit      Int          // in minutes
  startTime      DateTime
  endTime        DateTime?
  score          Int?
  totalQuestions Int?
  createdAt      DateTime     @default(now())
  questionIds    String[]     @default([])

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionPool QuestionPool @relation(fields: [questionPoolId], references: [id])
  answers      UserAnswer[]

  @@map("exam_sessions")
}

model UserAnswer {
  id             String   @id @default(cuid())
  examSessionId  String
  questionId     String
  answerIds      String[]  // JSON array of selected answer IDs
  isCorrect      Boolean
  createdAt      DateTime @default(now())

  // Relations
  examSession ExamSession @relation(fields: [examSessionId], references: [id], onDelete: Cascade)
  question    Question    @relation(fields: [questionId], references: [id])

  @@map("user_answers")
}

model QuestionStats {
  id               String   @id @default(cuid())
  userId           String
  questionId       String
  countTrue        Int      @default(0)
  countFalse       Int      @default(0)
  lastAttemptedAt  DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id])

  // Composite unique index
  @@unique([userId, questionId])
  @@map("question_stats")
}
